# -*- coding: utf-8 -*-
"""morgan_finger_features.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19NeFY4LdUE0JCQGcMN8ukYgiZvp6yS8x
"""

from rdkit import Chem, DataStructs
from rdkit.Chem import AllChem
import numpy as np
import pandas as pd

def generate_morgan_fingerprints_and_concat(data, n_bits=2048, radius=2):
    """
    Generates Morgan fingerprints for each SMILES in the dataframe and concatenates these fingerprints
    with the original dataframe.

    Returns:
    - concatenated_df: A dataframe with the Morgan fingerprints concatenated.
    """
    fingerprints = []

    for simile in data['SMILES']:
        mol = Chem.MolFromSmiles(simile)
        if mol:  # Check if the molecule is valid
            fp = AllChem.GetMorganFingerprintAsBitVect(mol, radius, nBits=n_bits)
            # Convert the RDKit ExplicitBitVect object to a numpy array
            arr = np.zeros((1,), dtype=np.int32)  # Use np.int32 instead of the deprecated np.int
            DataStructs.ConvertToNumpyArray(fp, arr)
            fingerprints.append(arr)
        else:
            fingerprints.append(np.full((n_bits,), np.nan))  # Add an array of NaN values if the molecule is not valid

    # Convert the numpy array to a dataframe
    fp_df = pd.DataFrame(fingerprints, columns=[f"bit_{i}" for i in range(n_bits)])

    # Concatenate the original dataframe and the fingerprint dataframe
    concatenated_df = pd.concat([data, fp_df], axis=1)

    return concatenated_df